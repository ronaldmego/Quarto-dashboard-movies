---
title: "Películas en cartelera y estadísticas de tmdb.org"
format:
  dashboard:
    logo: "images/creator.png"
    orientation: columns
---

## Column {width="60%"}

```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr2)
library(gt)
```

```{r, codehttr2-credencialesocultas-good}
#| echo: false
#| include: false

token <- Sys.getenv("TMDB_TOKEN")

response <- httr2::request("https://api.themoviedb.org/3/movie/now_playing") |> 
  httr2::req_method("GET") |> 
  httr2::req_url_query(
    language = "en-US",
    page = "1",
  ) |> 
  httr2::req_headers(
    Authorization = paste0("Bearer ",token),
    accept = "application/json",
  ) |> 
  httr2::req_perform() |>
  httr2::resp_body_json()

# Extraer la lista de películas
movies_list <- response$results
```



```{r, creadataframe}
#| echo: false
#| include: false

# Convertir la lista de películas en un dataframe
movies_df <- tibble::tibble(
  original_title = sapply(movies_list, function(x) x$original_title),
  movie_id = sapply(movies_list, function(x) x$id),
  original_language = sapply(movies_list, function(x) x$original_language),
  release_date = sapply(movies_list, function(x) x$release_date),
  adult = sapply(movies_list, function(x) x$adult),
  popularity = sapply(movies_list, function(x) x$popularity),
  vote_average = sapply(movies_list, function(x) x$vote_average),
  vote_count = sapply(movies_list, function(x) x$vote_count),
  genre_ids = sapply(movies_list, function(x) x$genre_ids), # Añadir el campo genre_ids
  backdrop_path = sapply(movies_list, function(x) x$backdrop_path),
  poster_path = sapply(movies_list, function(x) x$poster_path),
  overview = sapply(movies_list, function(x) x$overview)
)

# Modificar la columna poster_path para tener la URL completa
movies_df <- movies_df %>%
  mutate(
    backdrop_url = paste0("https://image.tmdb.org/t/p/w780", backdrop_path),
    poster_url = paste0("https://image.tmdb.org/t/p/w500", poster_path),
    days_in_theaters = as.numeric(Sys.Date() - as.Date(release_date)) # Calcular días en cartelera
)
```


```{r, stars}
generate_star_rating <- function(vote_averages) {
  sapply(vote_averages, function(vote_average) {
    vote_average <- round(as.numeric(vote_average), 1)  # Redondear a un decimal
    
    # Convertir de la escala de 0 a 10 a una escala de 0 a 5
    star_rating <- round(vote_average / 2, 1)
    
    # Obtener la parte entera y fraccionaria
    full_stars <- floor(star_rating)
    half_star <- ifelse(star_rating %% 1 >= 0.5, 1, 0)
    
    # Generar las estrellas llenas con tamaño más grande
    stars_html <- strrep('<span style="color: gold; font-size: 1.8em;">&#9733;</span>', full_stars)
    
    # Generar la media estrella si aplica con tamaño más grande
    if (half_star == 1) {
      stars_html <- paste0(stars_html, '<span style="color: gold; font-size: 1.8em;">&#9734;</span>')
    }
    
    # Completar con estrellas vacías con tamaño más grande
    empty_stars <- 5 - full_stars - half_star
    stars_html <- paste0(stars_html, strrep('<span style="color: #d3d3d3; font-size: 1.8em;">&#9733;</span>', empty_stars))
    
    # Incluir el número redondeado después de las estrellas con tamaño ajustado
    stars_html <- paste0(stars_html, ' ', '<span style="font-size: 1.5em; color: white;">', vote_average, '</span>')
    
    return(stars_html)
  }, USE.NAMES = FALSE)
}

```

```{r, function progress bar}
#| echo: false
#| include: false
generate_dynamic_progress_bar <- function(variable_name, max_value, min_value) {
  variable_name <- round(as.numeric(variable_name))  # Redondear a entero

  # Escalar el valor de popularidad a un porcentaje relativo, asegurando que no supere el 100%
  percentage <- min((variable_name - min_value*0.98) / (max_value - min_value) * 100, 100)
  
  # Formatear el número con separadores de miles
  formatted_value <- format(variable_name, big.mark = ",", scientific = FALSE)
  
  # Generar el código HTML para la barra de progreso con el número visible
  bar_color <- ifelse(percentage > 80, "#ED8E11", ifelse(percentage > 30, "#EDDE11", "#1DB954"))
  
  bar_code <- sprintf(
    '<div style="width: 160px; height: 20px; background-color: #3A3A3A; border-radius: 5px; position: relative; display: flex; align-items: left; justify-content: flex-start;">
      <div style="width: %1$s%%; height: 100%%; background-color: %2$s; border-radius: 5px;"></div>
      <div style="position: absolute; width: 160px; text-align: left; padding-left: 5px; font-size: 15px; color: white; display: flex; align-items: center;">%3$s</div>
    </div>',
    percentage, bar_color, formatted_value
  )
  
  return(bar_code)
}
```

```{r, termometro}
#| echo: false
#| include: false
generate_thermometer_svg <- function(variable_name, max_value, min_value) {
  # Asegurarse de que el valor es numérico
  variable_name <- round(as.numeric(variable_name))
  
  # Escalar el valor para que funcione en la visualización del termómetro
  percentage <- (variable_name - min_value) / (max_value - min_value) * 100
  
  # Determinar la altura del termómetro
  bar_height <- percentage * 50 / 100  # Escalar la altura
  
  color <- ifelse(percentage > 80, "#1DB954", ifelse(percentage > 30, "#EDDE11", "#ED8E11"))
  
  # Formatear el número con separadores de miles
  formatted_value <- format(variable_name, big.mark = ",", scientific = FALSE)
  
  svg_code <- sprintf(
    '<div style="display: flex; align-items: center;">
      <svg height="50" width="30">
        <rect x="5" y="0" width="50" height="50" fill="#3A3A3A" />
        <rect x="5" y="%1$s" width="50" height="%2$s" fill="%3$s" />
      </svg>
      <div style="padding-left: 10px; font-size: 15px; color: white;display: flex; align-items: center;">%4$s</div>
    </div>',
    50 - bar_height, bar_height, color, formatted_value
  )
  
  return(svg_code)
}
```


```{r, gt table}
#| echo: false
#| include: true
# Determinar el valor máximo y mínimo de days_in_theaters en el dataset actual
max_days <- max(movies_df$days_in_theaters, na.rm = TRUE)
min_days <- min(movies_df$days_in_theaters, na.rm = TRUE)

# Determinar el valor máximo y mínimo de popularidad en el dataset actual
max_popularity <- max(movies_df$popularity, na.rm = TRUE)
min_popularity <- min(movies_df$popularity, na.rm = TRUE)

# Crear la tabla GT con la barra de progreso dinámica y el termómetro intercambiados
movies_df %>%
  select(backdrop_url, original_title, vote_average, days_in_theaters, popularity) %>%  # Cambia el orden aquí
  gt::gt() %>%
  gt::cols_label(
    backdrop_url = md("**Movie**"),
    original_title = "",
    vote_average = md("**Stars**"),  # Renombrar a Puntuación
    days_in_theaters = md("**Days in Theaters**"),
    popularity = md("**Popularity**")
  ) %>%
  fmt_number(
    columns = c("days_in_theaters"),
    decimals = 0
  ) %>%
  text_transform(
    locations = cells_body(columns = backdrop_url),
    fn = function(x) { web_image(url = x, height = 80) }
  ) %>%
  text_transform(
    fn = function(x) {
      generate_star_rating(x)  # Aplica la función de estrellas a la columna Puntuación
    },
    locations = cells_body(columns = "vote_average")
  ) %>%
  text_transform(
    fn = function(x) {
      sapply(as.numeric(x), generate_dynamic_progress_bar, max_value = max_days, min_value = min_days)
    },
    locations = cells_body(columns = "days_in_theaters")
  ) %>%
  text_transform(
    fn = function(x) {
      sapply(as.numeric(x), generate_thermometer_svg, max_value = max_popularity, min_value = min_popularity)
    },
    locations = cells_body(columns = "popularity")
  ) %>%
  cols_align(
    align = "center",
    columns = c("vote_average", "days_in_theaters", "popularity")
  ) %>%
  tab_style(
    style = list(
    cell_text(size = px(20))  # Ajusta el tamaño del texto, usa px para pixeles
    ),
    locations = cells_body(columns = "original_title")
  ) %>%
  tab_options(
    table.font.color = "#FFFFFF",
    table.background.color = "#000000",
    table.font.size = px(12),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table_body.hlines.color = "transparent",
    table_body.border.bottom.color = "transparent",
    column_labels.border.bottom.color = "transparent",
    column_labels.border.top.color = "transparent"
  )


```

## Column {width="40%"}

### Row {height="10%"}

```{r, reduce la tabla}
#| echo: false
#| include: false
# Excluir el campo genre_ids y convertir a JSON
movies_df_simplified <- movies_df %>% select(-genre_ids)  # Excluye la columna genre_ids
str(movies_df_simplified)
sapply(movies_df_simplified, class)
```


```{r, send to ojs}
#| echo: false
#| include: false
library(jsonlite)
library(dplyr)

# Convertir el dataframe simplificado a JSON y escribirlo en un archivo en la carpeta "data"
#write_json(movies_df_simplified, "data/movies_data_simplified.json")

json_data <- toJSON(movies_df_simplified, auto_unbox = TRUE, pretty = TRUE)
write(json_data, "data/movies_data_simplified.json")
```



```{ojs}
//| expandable: false

movies_df_ojs = await FileAttachment("data/movies_data_simplified.json").json()

viewof movieDropdown = Inputs.select(
  movies_df_ojs.map(d => d.original_title),
  {
    label: "Choose a movie",
    unique: true
  }
)
```

```{r, get last update}
#| echo: false
#| include: false

get_last_update <- function() {
  last_update <- Sys.time()
  return(last_update)
}

# Usar la función para obtener la última actualización
last_update <- get_last_update()
```

```{r, poner la ultima hora actualizada en el dashboard}
#| echo: false
library(htmltools)

htmltools::div(
  style = "text-align: right; font-style: italic; color: #888888; font-size: 0.8em; margin-bottom: 20px;",
  paste("Last updated:", format(last_update, "%Y-%m-%d %H:%M:%S"))
)
```


### Row {height="80%"}

```{ojs}
selectedMovie = movies_df_ojs.find(d => d.original_title === movieDropdown)

html`<div style="height: 100%; display: flex; justify-content: center; align-items: center;">
  <img src="${selectedMovie.poster_url}" 
       alt="${selectedMovie.original_title}" 
       style="max-width: 90%; 
              max-height: 100%; 
              width: auto; 
              height: auto; 
              object-fit: contain;">
</div>`
```


```{ojs}
// Mostrar estadísticas adicionales
html`<div style="margin-top: 20px;">
  <h3>${selectedMovie.original_title}</h3>
  <p>Release Date: ${selectedMovie.release_date}</p>
  <p>Average Vote: ${selectedMovie.vote_average.toFixed(2)}</p>
  <p>Vote Count: ${selectedMovie.vote_count}</p>
  <p>Popularity: ${selectedMovie.popularity.toFixed(2)}</p>
  <p>Overview: ${selectedMovie.overview}</p>
</div>`
```




### Row {height="10%"}

<div style="display: flex; justify-content: space-between; align-items: center; height: 100%; padding: 0 20px;">
  <img src="images/logo.png" alt="Creator Logo" style="height: 50px; max-width: 100%; object-fit: contain;">
  <p style="font-size: 12px; color: #666; text-align: right; margin-left: 20px;">
    Los datos son cortesía del API de tmdb.org. Los datos se extraen bajo las políticas establecidas.
  </p>
</div>